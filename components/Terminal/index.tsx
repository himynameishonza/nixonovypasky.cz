import Meta from '../Meta';
import {useState} from 'react';
import router from 'next/router';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {
    fileStructure,
    HelpContent,
    TerminalPrompt,
    RadiolNewsContent,
    TerminalWelcomeMessage,
    LoanContent,
    LoanGrantedContent,
    LoanRejectedContent,
    RadiolIDContent,
    LoanNotAllowedContent,
    RadiolMessageWrapper,
    ReportTxtContent,
} from './data';
import {ReactTerminal, TerminalContextProvider} from 'react-terminal';
import * as rdd from 'react-device-detect';
import Link from 'next/link';

interface DeviceProps {
    children: (props: typeof rdd) => React.ReactNode;
}

export function Device(props: DeviceProps) {
    return <div className="device-layout-component">{props.children(rdd)}</div>;
}

export default function Terminal() {
    const [mainframeLocked, setMainframeLocked] = useState(true);
    const [bankStatement, setBankStatement] = useState(10304);
    const [loanBalance, setLoanBalance] = useState(0);
    const [attempts, setAttempts] = useState(0);
    const [currentDirectory, setCurrentDirectory] = useState('HOME');
    const files = [
        'README.txt',
        'RPREPORT.txt',
        'nice-dream.mp3',
        'strechy.mp3',
        'when-i-was-young.mp3',
    ];

    const takeLoan = amount => {
        let num = parseInt(amount);
        if (!amount) {
            return <LoanContent />;
        }

        if (num >= 5000 && num <= 20000) {
            if (loanBalance + num > 50000) {
                return <LoanNotAllowedContent />;
            } else {
                setLoanBalance(loanBalance + num);
                setBankStatement(bankStatement + num);
                return (
                    <LoanGrantedContent
                        bankStatement={bankStatement}
                        loanBalance={loanBalance}
                        loan={num}
                    />
                );
            }
        }

        if (num < 5000 || num > 20000) {
            return <LoanRejectedContent />;
        }
    };

    const randomWrongMessage = () => {
        const messages = [
            'Nenaslouch√°≈° okol√≠. N√°povƒõdy jsou v≈°ude okolo tebe.',
            'Nedoufej v n√°hodn√© prolomen√≠ hesla. Oba p≈ôeci v√≠me, ≈æe tolik ≈°tƒõst√≠ nem√°≈°.',
            'Nespƒõchej. P≈ôem√Ω≈°lej. Rozhl√©dni se.',
            'Opakovat st√°le stejn√Ω postup v oƒçek√°v√°n√≠ jin√©ho v√Ωsledku je bl√°hovost.',
            'Nezapom√≠nej na Little People...',
            'Byly i dny, kdy vƒõci nebyly zcela ztracen√©.',
            'Vzpom√≠n√°≈°, kdy≈æ je≈°tƒõ bar√°ky vrhaly st√≠n?',
        ];
        const min = 0;
        const max = 6;
        const rand = Math.floor(min + Math.random() * (max - min));
        return messages[rand];
    };

    const randomCorrectMessage = () => {
        const messages = [
            'Nƒõkdo koneƒçnƒõ zaƒçal poslouchat. Jse≈° na spr√°vn√© cestƒõ...',
            'Jsi na spr√°vn√© cestƒõ! Tam, kde to v≈°echno zaƒçalo. Tam, kde se zrodil nov√Ω p≈ô√≠bƒõh...',
            'Jsi velmi bl√≠zko! Staƒç√≠ u≈æ jen spr√°vn√© kl√≠ƒçov√© slovo.',
            'Orwell byl optimista.',
            'Jmenuji se Aomame. Jsem tv√° n√°povƒõda.',
            'Tam kde b√Ωvala dev√≠tka, le≈æ√≠ nyn√≠ ky≈´.',
        ];
        const min = 0;
        const max = 6;
        const rand = Math.floor(min + Math.random() * (max - min));
        return messages[rand];
    };

    const passwordCheck = password => {
        if (!password || password === '') {
            setMainframeLocked(true);
            return (
                <TerminalPrompt
                    type="SYSTEM"
                    currentDirectory={currentDirectory}
                    content={
                        <>
                            Pro odemƒçen√≠ Mainframu vyu≈æijte p≈ô√≠kaz{' '}
                            <b className="bg-emerald-600 text-emerald-400 px-1">unlock</b>{' '}
                            n√°sledovan√Ω heslem.
                        </>
                    }
                />
            );
        }

        if (password !== '1Q84') {
            setAttempts(attempts + 1);
            setMainframeLocked(true);

            if (attempts < 4) {
                return (
                    <TerminalPrompt
                        type="SYSTEM"
                        currentDirectory={currentDirectory}
                        content={'Chybn√© heslo, opakujte zad√°n√≠'}
                    />
                );
            }

            if (attempts >= 4) {
                if (
                    password === 'orwell' ||
                    password === 'Orwell' ||
                    password === '1984' ||
                    password === 'George' ||
                    password === 'utopie'
                ) {
                    return (
                        <TerminalPrompt
                            type="AOMAME"
                            currentDirectory={currentDirectory}
                            content={randomCorrectMessage()}
                        />
                    );
                } else {
                    return (
                        <TerminalPrompt
                            type="AOMAME"
                            currentDirectory={currentDirectory}
                            content={
                                attempts === 4
                                    ? 'Kdopak se n√°m to sem sna≈æ√≠ dostat? Ty nebude≈° obyƒçejn√Ω obƒçan, ≈æe? Pokud tomu tak je, heslo urƒçitƒõ zn√°≈°...'
                                    : randomWrongMessage()
                            }
                        />
                    );
                }
            }
        }

        if (password === '1Q84') {
            setMainframeLocked(false);
            return (
                <>
                    <div className="mt-5">
                        <TerminalPrompt
                            type="SYSTEM"
                            currentDirectory={currentDirectory}
                            content="P≈ô√≠stup obƒçanovi XA49935 udƒõlen, dƒõkujeme za vyu≈æ√≠v√°n√≠ slu≈æeb Radionetu."
                        />
                    </div>
                </>
            );
        }
    };

    const openDirectory = directory => {
        if (directory === 'NIXONOVY-PASKY' && mainframeLocked) {
            setBankStatement(bankStatement - 5000);
            return (
                <>
                    <div className="mt-5">
                        <TerminalPrompt
                            type="SYSTEM"
                            currentDirectory={currentDirectory}
                            content="Pokus o neopr√°vnƒõn√© vniknut√≠ do Mainframu!"
                        />
                    </div>
                    <RadiolMessageWrapper title="RadioPol Report">
                        Zji≈°tƒõno naru≈°en√≠ pravidel obƒçask√©ho sou≈æit√≠ a z√°sad Radionetu. RadioPol V√°m
                        udƒõluje pokutu ve v√Ω≈°i 5 000 kredit≈Ø
                        <br />
                        Aktu√°ln√≠ stav √∫ƒçtu RadiolPay: {bankStatement} kredit≈Ø
                    </RadiolMessageWrapper>
                </>
            );
        }
        if (directory === 'NIXONOVY-PASKY' && !mainframeLocked) {
            setCurrentDirectory('NIXONOVY-PASKY');
        }

        if (directory === 'HOME') {
            setCurrentDirectory('HOME');
        }
        if (directory !== 'NIXONOVY-PASKY' && directory !== 'HOME') {
            return (
                <div className="mt-5">
                    <TerminalPrompt
                        type="SYSTEM"
                        currentDirectory={currentDirectory}
                        content="Po≈æadovan√Ω adres√°≈ô nebyl nalezen"
                    />
                </div>
            );
        }
    };

    const browseDirectories = directory => {
        if (directory === 'HOME') {
            return (
                <div className="pl-4 border-l-8 border-double border-purple-300 border-opacity-30 w-full leading-6 mt-5 text-purple-300  ">
                    <div>
                        <span className="opacity-40 mr-2">üìÇ</span>HOME
                    </div>
                    {fileStructure.root.folders.map((folder, index) => {
                        return (
                            <div key={index}>
                                <span className="opacity-40 mr-2">‚ï†‚ïê‚ïê üìÇ</span>
                                {folder.name} {mainframeLocked ? 'üîí' : null}
                            </div>
                        );
                    })}
                    {fileStructure.root.files.map((file, index) => {
                        return (
                            <div key={index}>
                                <span className="opacity-40 mr-2">
                                    {index < fileStructure.archive.files.length - 1 ? '‚ï†‚ïê‚ïê' : '‚ïö‚ïê‚ïê'}
                                </span>
                                {file.name}
                            </div>
                        );
                    })}
                </div>
            );
        }

        if (directory === 'NIXONOVY-PASKY') {
            return (
                <div className="pl-4 border-l-8 border-double border-purple-300 border-opacity-30 w-full leading-6 mt-5 text-purple-300  ">
                    <div>
                        <span className="opacity-40 mr-2">üìÇ</span>NIXONOVY-PASKY
                    </div>
                    {fileStructure.archive.folders.map((folder, index) => {
                        return (
                            <div key={index}>
                                <span className="opacity-40 mr-2">‚ï†‚ïê‚ïê üìÇ</span>
                                {folder.name}
                            </div>
                        );
                    })}
                    {fileStructure.archive.files.map((file, index) => {
                        return (
                            <div key={index}>
                                <span className="opacity-40 mr-2">
                                    {index < fileStructure.archive.files.length - 1 ? '‚ï†‚ïê‚ïê' : '‚ïö‚ïê‚ïê'}
                                </span>
                                {file.name}
                            </div>
                        );
                    })}
                </div>
            );
        }
    };

    const openFile = file => {
        if (files.includes(file)) {
            switch (file) {
                case 'RPREPORT.txt':
                    return <ReportTxtContent />;
                    break;
                case 'nice-dream.mp3':
                    return (
                        <div className="ml-10 max-full leading-6 mt-5  text-amber-300">
                            <FontAwesomeIcon icon="draw-circle" className="animate-spin mr-2" />
                            P≈ôehr√°v√°m soubor {file}{' '}
                            <span className="opacity-40">
                                [Pro p≈ôeru≈°en√≠ stisknƒõtƒõ{' '}
                                <b className="bg-amber-600 text-amber-400 px-1">q</b>]
                            </span>
                        </div>
                    );
                default:
                    <TerminalPrompt
                        type="SYSTEM"
                        currentDirectory={currentDirectory}
                        content={<>Soubor {file} nenalezen</>}
                    />;
            }
        }
    };
    // Define commands here
    const commands = {
        killall: () => router.push('/'),
        unlock: password => passwordCheck(password),
        cd: directory => openDirectory(directory),
        open: file => openFile(file),
        q: (
            <TerminalPrompt
                type="SYSTEM"
                currentDirectory={currentDirectory}
                content="Nenalezen ≈æ√°dn√Ω aktivn√≠ proces"
            />
        ),
        dir: () => browseDirectories(currentDirectory),
        rlid: (
            <RadiolIDContent
                creditBalance={bankStatement}
                loanBalance={loanBalance}
                hoursLeft={loanBalance / 20}
            />
        ),
        rlloan: amount => takeLoan(amount),
        rlnews: <RadiolNewsContent />,
        help: <HelpContent />,
    };

    return (
        <>
            <Meta title="Radionet Mainframe" />

            <div className="w-full h-full bg-[#111] font-terminal overflow-hidden">
                <div className="terminal">
                    <div className="terminal-glitch" />
                    <div className="noise"></div>

                    <Device>
                        {({isMobile}) => {
                            if (isMobile)
                                return (
                                    <div className="top-0 left-0 right-0 bottom-0 fixed m-0  pb-12 pt-12">
                                        <div className="text-emerald-300 w-full h-full flex flex-col max-w-lg m-auto text-center p-12 items-center justify-center overflow-auto">
                                            <TerminalWelcomeMessage />
                                            <span className="text-xs leading-5">
                                                Zd√° se, ≈æe m√°≈° p≈ô√≠li≈° modern√≠ za≈ô√≠zen√≠, obƒçane.
                                                Radiol Mainframe je podporov√°n pouze s√°lov√Ωmi a
                                                osobn√≠mi poƒç√≠taƒçi s klasick√Ωm kl√°vesnicov√Ωm vstupem.
                                            </span>
                                            <div className="p-5 mt-10">
                                                <Link
                                                    href={'https://www.facebook.com/nixonovypasky'}
                                                    passHref
                                                >
                                                    <a className="w-7 h-7 inline-flex items-center justify-center mx-2">
                                                        <FontAwesomeIcon
                                                            icon={['fab', 'facebook']}
                                                            className="w-full h-full"
                                                        />
                                                    </a>
                                                </Link>
                                                <Link
                                                    href="https://www.instagram.com/nixonovypasky/"
                                                    passHref
                                                >
                                                    <a className="w-7 h-7 inline-flex items-center justify-center mx-2">
                                                        <FontAwesomeIcon
                                                            icon={['fab', 'instagram']}
                                                            className="w-full h-full"
                                                        />
                                                    </a>
                                                </Link>
                                            </div>
                                            <Link href={'/koncerty'} passHref>
                                                [ Koncerty ]
                                            </Link>
                                        </div>
                                    </div>
                                );
                            return (
                                <div className="grid h-screen overflow-y-auto pb-20">
                                    <TerminalContextProvider>
                                        <ReactTerminal
                                            commands={commands}
                                            themes={{
                                                radiol: {
                                                    themeBGColor: 'transparent',
                                                    themeToolbarColor: 'transparent',
                                                    themeColor: '#0cd787',
                                                    themePromptColor: 'transparent',
                                                },
                                            }}
                                            theme="radiol"
                                            errorMessage={
                                                <TerminalPrompt
                                                    type="SYSTEM"
                                                    currentDirectory={currentDirectory}
                                                    content={
                                                        <>
                                                            Nezn√°m√Ω p≈ô√≠kaz, pro zobrazen√≠ n√°povƒõdy
                                                            vyu≈æijte p≈ô√≠kaz{' '}
                                                            <b className="bg-emerald-600 text-emerald-400 px-1">
                                                                help
                                                            </b>
                                                        </>
                                                    }
                                                />
                                            }
                                            prompt={
                                                <TerminalPrompt
                                                    locked={mainframeLocked}
                                                    currentDirectory={currentDirectory}
                                                    type={'INPUT'}
                                                />
                                            }
                                            showControlBar={false}
                                            welcomeMessage={<TerminalWelcomeMessage />}
                                        />
                                    </TerminalContextProvider>
                                </div>
                            );
                        }}
                    </Device>
                </div>
            </div>
        </>
    );
}
